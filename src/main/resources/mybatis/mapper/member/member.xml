<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spark.dating.member.MemberDao">

  <!-- <resultMap id="Member" type="Member">
    <id property="mNo" column="M_NO"/>
    <result property="mId" column="M_ID"/>
    <result property="mPassword" column="M_PASSWORD"/>
    <result property="mName" column="M_NAME"/>
    <result property="mSsn" column="M_SSN"/>
    <result property="mAge" column="M_AGE"/>
    <result property="mEmail" column="M_EMAIL"/>
    <result property="mGender" column="M_GENDER"/>
    <result property="mPhone" column="M_PHONE"/>
    <result property="mNickname" column="M_NICKNAME"/>
    <result property="mRegion" column="M_REGION"/>
    <result property="mBio" column="M_BIO"/>
    <result property="mMbti" column="M_MBTI"/>
    <result property="mActive" column="M_ACTIVE"/>
  </resultMap> -->

  <insert id = "insertMember" parameterType="Member">
    <selectKey keyProperty="mNo" resultType="int" order="BEFORE">
    SELECT MEMBER_SEQ.NEXTVAL FROM dual
    </selectKey>
    
    insert into member (
      M_NO, M_ID, M_PASSWORD, M_NAME, M_SSN, M_AGE,
      M_EMAIL, M_GENDER, M_PHONE, M_NICKNAME, M_REGION,
      M_BIO, M_MBTI, M_ACTIVE
    ) 
    VALUES (
      #{mNo}, #{mId}, #{mPassword}, #{mName}, #{mSsn}, #{mAge},
      #{mEmail}, #{mGender}, #{mPhone}, #{mNickname}, #{mRegion},
      #{mBio}, #{mMbti}, #{mActive}
    )
  </insert>

  <update id = "updateMember" parameterType="Member">
    update member
    set
       M_PASSWORD = #{mPassword},
       M_NAME = #{mName},
       M_SSN = #{mSsn},
       M_AGE = #{mAge},
       M_EMAIL = #{mEmail},
       M_GENDER = #{mGender},
       M_PHONE = #{mPhone},
       M_NICKNAME = #{mNickname},
       M_REGION = #{mRegion},
       M_BIO = #{mBio},
       M_MBTI = #{mMbti},
       M_ACTIVE = #{mActive}
       
      where m_no = #{mNo}
  </update>

  <select id="SelectMemberByM_id" resultType="Member" parameterType="String">
    SELECT *
	  from member
    where M_ID = #{value}
  </select>
  
  <select id="existsByNo" resultType="int" parameterType="Long">
	SELECT CASE 
	         WHEN EXISTS (
	           SELECT 1 FROM MEMBER WHERE M_NO = #{M_NO}
	         ) THEN 1
	         ELSE 0
	       END AS IS_EXIST
	FROM DUAL
  </select>

  <select id="selectMemberByMnickname" resultType="MemberForFeed" parameterType="String">
    SELECT M_NO, M_ID, M_NAME, M_AGE, M_NICKNAME, M_BIO, M_MBTI
	  from member
    where m_nickname = #{mNickname}
  </select>


  <update id="updateMemberStatusInfo" parameterType="com.spark.dating.dto.chat.MemberStatusMessage">
	  UPDATE MEMBERSTATUS
       SET MS_STATUS = #{memberStatus},
           MS_LAST_ACTIVE = SYSDATE
     WHERE MS_NO = #{memberNO}
  </update>
  
  <select id="selectMnickNameByMno" parameterType="Long" resultType="String">
  	SELECT M_NICKNAME
    FROM MEMBER
    WHERE M_NO = #{memberNo}
   </select>
   
   <select id="checkUuidMatch" parameterType="hashmap" resultType="int">
   SELECT CASE WHEN EXISTS (
        SELECT 1
        FROM MEMBER
        WHERE M_NO = #{memberNo}
          AND M_UUID = #{uuid}
    ) THEN 1 ELSE 0 END
	FROM DUAL
   </select>
   
   <select id="getMemberNoByUuid" parameterType="String" resultType="Long">
   SELECT M_NO
    FROM MEMBER
    WHERE M_UUID = #{uuid}
   </select>
   
   <select id="getMemberUuidByMemberNo" parameterType="Long" resultType="String">
    SELECT M_UUID
    FROM MEMBER
    WHERE M_NO = #{memberNo}
   </select>
  <select id="selectMemberByMno" resultType="MemberForFeed" parameterType="int">
    SELECT M_NO, M_ID, M_NAME, M_AGE, M_NICKNAME, M_BIO, M_MBTI
	  from member
    where m_no = #{mNo}
  </select>

  <select id="selectRandomMembersExceptMe" resultType="MemberForFeed" parameterType="map">
  <![CDATA[
    SELECT M_NO, M_ID, M_NAME, M_AGE, M_NICKNAME, M_BIO, M_MBTI
    FROM (
      SELECT *
      FROM MEMBER
      WHERE M_NO <> #{myNo}
      ORDER BY DBMS_RANDOM.VALUE
    )
    WHERE ROWNUM <= #{count}
  ]]>
</select>

</mapper>